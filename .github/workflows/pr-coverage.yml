name: PR Coverage Report

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]

env:
  CARGO_TERM_COLOR: always

jobs:
  pr-coverage:
    name: PR Coverage Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@nightly
      with:
        components: llvm-tools-preview
    
    - name: Install cargo-llvm-cov
      run: cargo install cargo-llvm-cov --locked
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Run coverage analysis
      run: |
        # Run tests with coverage using cargo-llvm-cov
        cargo llvm-cov --workspace --all-features --lcov --output-path lcov.info --quiet
    
    - name: Generate PR coverage comment
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          // Read coverage data
          let coverageData = {};
          try {
            const summary = require('child_process').execSync('cargo llvm-cov --workspace --all-features --summary-only --json', { encoding: 'utf8' });
            coverageData = JSON.parse(summary);
          } catch (error) {
            console.log('Could not parse coverage data:', error.message);
          }
          
          // Calculate coverage percentages
          const totalLines = coverageData.totals?.lines?.total || 0;
          const coveredLines = coverageData.totals?.lines?.covered || 0;
          const coveragePercent = coverageData.totals?.lines?.percent || 0;
          
          // Calculate application coverage (excluding test utilities)
          const testUtilsLines = 861;
          const appTotalLines = Math.max(0, totalLines - testUtilsLines);
          const appCoveragePercent = appTotalLines > 0 ? (coveredLines * 100 / appTotalLines) : 0;
          
          // Create comment
          const comment = `## üìä Coverage Report
          
          **Overall Coverage:** ${coveragePercent.toFixed(2)}%
          **Application Coverage:** ${appCoveragePercent.toFixed(2)}%
          **Target:** 80%
          
          ${appCoveragePercent >= 80 ? '‚úÖ **Status:** Target achieved!' : 
            appCoveragePercent >= 70 ? '‚ö†Ô∏è **Status:** Below target but above threshold' : 
            '‚ùå **Status:** Below 70% threshold'}
          
          ### Module Breakdown
          ${coverageData.files ? coverageData.files
            .filter(file => file.filename.includes('src/') && 
                           !file.filename.includes('test_utils') && 
                           !file.filename.includes('test_usage'))
            .map(file => {
              const module = file.filename.split('/').pop().replace('.rs', '');
              const coverage = file.lines?.percent || 0;
              const status = coverage >= 80 ? '‚úÖ' : coverage >= 60 ? '‚ö†Ô∏è' : '‚ùå';
              return `- **${module}**: ${coverage.toFixed(1)}% ${status}`;
            })
            .join('\n') : 'No module data available'}
          
          ### Quick Actions
          - View detailed report: [Codecov.io](https://codecov.io/gh/${{ github.repository }}/pull/${{ github.event.pull_request.number }})
          - Run locally: \`make coverage-analyze\`
          - Get suggestions: \`make coverage-suggest MODULE=<name>\`
          
          ---
          *This report is automatically generated by the coverage workflow.*`;
          
          // Post comment
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        verbose: true
        token: ${{ secrets.CODECOV_TOKEN }}
